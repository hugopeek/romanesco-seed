#!/bin/bash

# ROMANESCO SEED
# ==============================================================================
#
# A collection of commands for installing a Romanesco project.


# FUNCTIONS
# ==============================================================================

# generate random password
function genpasswd() {
  local l=$1
  [ "$l" == "" ] && l=16
  tr -dc A-Za-z0-9_ </dev/urandom | head -c ${l} | xargs
}

# return useful error on failure
function clarify() {
  exitCode="$?"
  # ignore exit code 0
  if [[ $exitCode -gt 0 ]] ; then
    echo "\"${last_command}\" command failed with exit code $exitCode."
  fi
}


# CONFIG
# ==============================================================================

# determine absolute path of this file and chdir to it
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # loop until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  # if $SOURCE was a relative symlink, we need to resolve it relative to the
  # path where the symlink file was located
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd "$DIR"

# exit on any type of error
set -e

# keep track of the last executed command
trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG

# clarify errors on exit
trap clarify EXIT


# VARIABLES
# ==============================================================================

version="1.0"
seedPath="${DIR%/}"

# styling
RED="\033[0;31m"
GREEN="\033[1;32m"
YELLOW="\033[0;33m"
NC='\033[0m' #no color
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

# local defaults
localUser=
homeFolder=
modxVersion=
defaultUser=
defaultEmail=
gpmPath=
packagesPath=
themeColorPrimary=
themeColorPrimaryLight=
welcomePage="$seedPath/data/romanesco.html"

# load local variables from file
source "${seedPath}/config.sh"

# command line defaults
prepareFlag=
plantFlag=
purgeFlag=
projectFlag=
dbFlag=

# collect command line arguments
while [[ "$1" ]]; do
  case $1 in
  -v | --version)
    echo "$version"
    exit 0
    ;;
  -s | --no-syntax)
    echo "No syntax highlighting please."
    RED=
    GREEN=
    YELLOW=
    NC=
    BOLD=
    NORMAL=
    ;;
  -h | --help)
    source "${seedPath}/run/00-help.sh"
    exit 0
    ;;
  prepare)
    prepareFlag=1
    prepareUser=
    prepareNginx=
    preparePHP=
    prepareSSL=
    prepareGitify=
    prepareNode=
    forcePrepare=
    while [[ "$2" ]]; do
      # move to next task
      if [[ "$2" == "and" ]]; then break; fi
      if [[ "$2" == "for" ]]; then break; fi
      case $2 in
      user)
        prepareUser=1
        projectFlag=1
        ;;
      nginx)
        prepareNginx=1
        projectFlag=1
        ;;
      php-fpm)
        preparePHP=1
        projectFlag=1
        ;;
      ssl)
        prepareSSL=1
        projectFlag=1
        ;;
      gitify)
        prepareGitify=1
        ;;
      node)
        prepareNode=1
        ;;
      everything)
        prepareAll=1
        projectFlag=1
        ;;
      -f | --force)
        forcePrepare=1
        ;;
      '' | *)
        printf "${RED}Computer says no.${NC}\n"
        exit 0
        ;;
      esac
      shift
    done
    ;;
  plant)
    plantFlag=1
    plantSeed=
    npmFlag=
    forcePlant=
    while [[ "$2" ]]; do
      # move to next task
      if [[ "$2" == "and" ]]; then break; fi
      if [[ "$2" == "for" ]]; then break; fi
      case $2 in
      seed)
        plantSeed=1
        projectFlag=1
        ;;
      -n | --npm)
        npmFlag=1
        ;;
      -f | --force)
        forcePlant=1
        ;;
      '' | *)
        printf "${RED}Computer says no.${NC}\n"
        exit 0
        ;;
      esac
      shift
    done
    ;;
  purge)
    purgeFlag=1
    purgeAll=
    while [[ "$2" ]]; do
      # move to next task
      if [[ "$2" == "and" ]]; then break; fi
      if [[ "$2" == "for" ]]; then break; fi
      case $2 in
      everything)
        purgeAll=1
        projectFlag=1
        ;;
      '' | *)
        printf "${RED}Computer says no.${NC}\n"
        exit 0
        ;;
      esac
      shift
    done
    ;;
  project)
    projectFlag=1
    projectName="$2"
    installPath=
    projectURL=
    userName=
    userPass=
    userEmail=
    language=
    domainFlag=
    adminFlag=
    while [[ "$2" ]]; do
      if [[ "$2" == "in" ]]; then break; fi
      case $2 in
      -p | --path )
        installPath="$3"
        ;;
      -d | --domain )
        domainFlag=1
        projectURL="$3"
        ;;
      -u | --username )
        userName="$3"
        ;;
      -s | --password )
        userPass="$3"
        ;;
      -e | --email )
        userEmail="$3"
        ;;
      -l | --language )
        language="$3"
        ;;
      -a | --admin )
        adminFlag=1
        ;;
      esac
      shift
    done
    ;;
  database)
    dbFlag=1
    dbName=
    dbUser=
    dbPass=
    while [[ "$2" ]]; do
      case $2 in
      -n | --dbname )
        dbName="$3"
        ;;
      -u | --username )
        dbUser="$3"
        ;;
      -s | --password )
        dbPass="$3"
        ;;
      esac
      shift
    done
    ;;
  esac
  shift
done

# flags for additional safety / control
copyPackages="y"
copyFiles="y"
installMODX="y"
installPackages="y"
buildRomanesco="y"

# project name
lcaseName="${projectName,,}" #convert to lowercase
lcaseName="${lcaseName// /-}" #remove whitespace

# domain name
projectURL="${projectURL:-${lcaseName}.${domainExt}}"

# if local user is NOT defined in config.sh, a new user will be created
localUserFlag=
phpSocket="/run/php/php${phpVersion}-fpm.sock"
if ! [ "$localUser" ]
then
  localUser="$lcaseName"
  localUserFlag=1
  phpUser="$localUser"
  # separate php-fpm pool for each local user
  phpSocket="/var/run/php${phpVersion}-fpm.${phpUser}.sock"
fi

# install location
if [ "$installPath" ]
then
  installPath="${installPath%/}"
elif ! [ "$installPath" ] && [ -d "$wwwPath" ]
then
  # I am your parent folder Luke, it is your destiny
  installPath="${wwwPath%/}/$lcaseName"
elif ! [ "$wwwPath" ]
then
  # NNNEVEEEEEER!!!!! I want my own home folder, papa
  homeFolder="/home/$localUser"
  installPath="$homeFolder/www"
else
  printf "${BOLD}No valid installation path defined.${NORMAL}\n"
  printf "${RED}Abort.${NC}\n"
  exit 1
fi

# nested repositories
installPathData="$installPath/_romanesco"
installPathTheme="$installPath/assets/semantic/src/themes/romanesco"

# data folders
configsPath="$installPath/_defaults/cg_settings"
settingsPath="$installPath/_defaults/system_settings"

# asset folders
siteFolder="$installPath/assets/semantic/src/site"
themeFolder="$installPath/assets/semantic/themes/romanesco"

# GPM packages
gpmPath="${gpmPath%/}"
gpmRepos=(
  "$cbHeadingImagePath"
  "$romanescoBackyardPath"
  "$htmlPageDomPath"
  "$mailBlocksPath"
)
gpmProjects=(
  "cbheadingimage"
  "romanesco-backyard"
  "htmlpagedom"
  "mailblocks"
)
gpmPackages=()

# database
if ! [ "$dbFlag" ]
then
  dbName="${lcaseName//-/}"
  dbUser="${dbName}_dbu"
  dbPass="$(genpasswd)"
fi

# MODX
modxVersion="${modxVersion}"
configXML="$(mktemp)"
language="${language:-en}"
userName="${userName:-${lcaseName//-/}_admin}"
userPass="${userPass:-$(genpasswd)}"
userEmail="${userEmail:-${defaultEmail}}"
adminPass=
httpHost="${projectURL}"
baseURL="/"

# https
if [ "$domainFlag" ]
then
  uriScheme="https"
else
  uriScheme="http"
fi


# CHECKS
# ==============================================================================

# double check if project name is set
if [ "$projectFlag" ] && ! [ "$projectName" ]
then
  printf "${BOLD}Please specify a project name.${NORMAL}\n"
  printf "${RED}Abort.${NC}\n"
  exit 0
fi

# double check if installation path is defined
if ! [ "$installPath" ]
then
  printf "${BOLD}Please define an installation path.${NORMAL}\n"
  printf "${RED}Abort.${NC}\n"
  exit 0
fi


# TASKS
# ==============================================================================

if [ "$prepareFlag" ]
then
  echo "Preparing the soil..."
  if [ "$prepareUser" ] ; then
    source "${seedPath}/run/10-user.sh"
  fi
  if [ "$prepareNginx" ] || [ "$preparePHP"] || [ "$prepareSSL"] ; then
    source "${seedPath}/run/11-server.sh"
  fi
  if [ "$prepareGitify" ] ; then
    source "${seedPath}/run/20-gitify.sh"
  fi
  if [ "$prepareNode" ] ; then
    source "${seedPath}/run/21-node.sh"
  fi
  installType="prepared"
fi

if [ "$plantFlag" ] &&  [ "$plantSeed" ]
then
  echo "Planting Romanesco..."
  source "${seedPath}/run/30-copy.sh"
  source "${seedPath}/run/31-customize.sh"
  source "${seedPath}/run/35-build.sh"
  source "${seedPath}/run/36-customize.sh"
  source "${seedPath}/run/37-permissions.sh"
  installType="planted"
fi

if [ "$purgeFlag" ]
then
  echo -e "${YELLOW}You are about to obliterate the entire ${BOLD}$projectName${NORMAL}${YELLOW} project.${NC}"
  read -p "${BOLD}Are you sure? [y/N] ${NORMAL}" purgeProject

  # add manual confirmation as failsafe
  if [ "${purgeProject:-N}" != Y ] ; then
    printf "I sense much fear in you...\n"
    if [ "${purgeProject:-N}" = y ] ; then
      echo "(and you need to capitalize the 'Y', jedi)"
    fi
    printf "${RED}Abort.${NC}\n"
    exit
  else
    printf "${RED}Wipe them out. All of them.${RED}\n"
    printf "${RED}Execute Order 66.${NC}\n"

    # do it Anakin, even the children...
    source "${seedPath}"/run/66-purge.sh
    printf "${RED}It is done, my master.\n"
    installType="deleted"
  fi
fi

# we made it!
printf "${GREEN}Project '${projectName:-}' successfully $installType!${NORMAL}\n"
exit
